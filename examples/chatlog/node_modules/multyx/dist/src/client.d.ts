import { MultyxObject, MultyxTeam } from "./multyx";
import { WebSocket } from "ws";
import { RawObject } from "./types";
import { MultyxServer } from "./index";
import Message from "./message";
export declare class Client {
    data: RawObject;
    shared: MultyxObject;
    controller: Controller;
    teams: Set<MultyxTeam>;
    ws: WebSocket;
    server: MultyxServer;
    uuid: string;
    joinTime: number;
    onUpdate: (deltaTime: number, controllerState: ControllerState) => void;
    constructor(ws: WebSocket, server: MultyxServer);
    /**
     * Create client-side representation of client object
     */
    parse(): RawObject;
}
export declare enum Input {
    MouseMove = "mousemove",
    MouseDown = "mousedown",
    MouseUp = "mouseup",
    KeyDown = "keydown",
    KeyHold = "keyhold",
    KeyUp = "keyup",
    KeyPress = "keypress",
    Shift = "Shift",
    Alt = "Alt",
    Tab = "Tab",
    Control = "Control",
    Enter = "Enter",
    Escape = "Escape",
    Delete = "Delete",
    Space = "Space",
    CapsLock = "CapsLock",
    LeftShift = "ShiftLeft",
    RightShift = "ShiftRight",
    LeftControl = "ControlLeft",
    RightControl = "ControlRight",
    LeftAlt = "AltLeft",
    RightAlt = "AltRight",
    UpArrow = "ArrowUp",
    DownArrow = "ArrowDown",
    LeftArrow = "ArrowLeft",
    RightArrow = "ArrowRight"
}
export declare type ControllerState = {
    keys: {
        [key: string]: boolean;
    };
    mouse: {
        x: number;
        y: number;
        down: boolean;
    };
};
export declare class Controller {
    client: Client;
    state: ControllerState;
    listening: Set<string>;
    events: Map<string, ((state: ControllerState) => void)[]>;
    constructor(client: Client);
    /**
     *
     * @param input Input to listen for; If type `string`, client listens for keyboard event code `input`
     */
    listenTo(input: Input | string | (Input | string)[], callback?: (state: ControllerState) => void): void;
    parseUpdate(msg: Message): void;
}
