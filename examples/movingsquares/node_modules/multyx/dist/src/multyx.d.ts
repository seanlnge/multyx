import { Client } from "./client";
import { RawObject, Value } from "./types";
import { EditWrapper } from "./utils";
export declare class MultyxObject {
    data: {
        [key: string]: MultyxObject | MultyxValue;
    };
    propertyPath: string[];
    client: Client;
    constructor(object: RawObject, client: Client, propertyPath?: string[]);
    disable(): this;
    enable(): this;
    public(team?: MultyxTeam): this;
    /**
     * Check if property is in object
     */
    has(property: string): boolean;
    /**
     * Get the ClientValue object of a property
     */
    get(property: string): any;
    /**
     * Set the explicit value of the ClientValue object of a property
     * @example
     * ```js
     * // Server
     * multyx.on('reset', client => client.player.setValue('x', 5));
     *
     * // Client
     * client.player.x = 20 * Math.random();
     * multyx.send('reset');
     * console.log(client.player.x); // 5
     * ```
     */
    set(property: string, value: Value | RawObject | MultyxObject): false | this | {
        clients: Set<Client>;
    };
    get raw(): RawObject<any>;
    getPublic(team?: MultyxTeam): RawObject;
    buildConstraintTable(): RawObject<any>;
    editPropertyPath(newPath: string[]): void;
}
export declare class MultyxValue {
    value: string | number | boolean;
    disabled: boolean;
    constraints: Map<string, {
        args: any[];
        func: (value: Value) => Value | null;
    }>;
    manualConstraints: ((value: Value) => Value | null)[];
    bannedValues: Set<Value>;
    private publicTeams;
    propertyPath: string[];
    client: Client;
    constructor(value: Value, client: Client, propertyPath: string[]);
    disable(): this;
    enable(): this;
    public(team?: MultyxTeam): void;
    isPublic(team?: MultyxTeam): boolean;
    set(value: Value | EditWrapper<Value>): false | {
        clients: Set<Client>;
    };
    buildConstraintTable(): RawObject<any>;
    min: (value: Value) => this;
    max: (value: Value) => this;
    ban: (value: Value) => this;
    constrain: (func: (value: Value) => Value | null) => this;
}
export declare class MultyxTeam {
    clients: Set<Client>;
    publicData: Set<MultyxValue>;
    constructor(clients?: Set<Client> | Client[]);
    addClient(client: Client): void;
    getPublic(): Map<Client, RawObject>;
}
export declare const MultyxClients: MultyxTeam;
